version: "3.9"

######### IMPORTANT #############
# This is my main docker-compose file with most of the apps. I run docker on other systems with smaller stacks (web and synology).
# You can copy-paste services from one docker-compose file in this repo to another to add other apps.

########################### SYSTEM DESCRIPTION
# DOCKER-COMPOSE FOR HOME/MEDIA SERVER
# PROXMOX HOST: Dual Intel Xeon E3-1240 V2, 16 GB RAM, 480 GB SSD, and 4 TB HDD
# LXC: 2 CORES, 8 GB RAM, Ubuntu 20.04, and Docker
# 64 GB for / and 2 TB for non-critical data and rclone cache.
# Google Drive mounted using Rclone Docker for media and Proxmox backups

# Docker: 20.10.17
# Docker Compose: 2.5.1

########################### NETWORKS
# There is no need to create any networks outside this docker-compose file.
# You may customize the network subnets (192.168.90.0/24 and 91.0/24) below as you please.
# Docker Compose version 3.5 or higher required to define networks this way.

# reserved IPs

#192.168.90.254 traefik
#192.168.90.199 cloudflared
#192.168.90.170 sabnzbd
#192.168.90.167 sonarr
#192.168.90.164 radarr
#192.168.90.163 tdarr
#192.168.90.162 prowlarr
#192.168.90.161 gluetun
#192.168.90.160 flaresolverr

networks:
  t2_proxy:
    name: t2_proxy
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.90.0/24
  default:
    driver: bridge
  socket_proxy:
    name: socket_proxy
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.91.0/24

########################### SECRETS
secrets:
  htpasswd:
    file: $DOCKERDIR/secrets/htpasswd
  cf_email:
    file: $DOCKERDIR/secrets/cf_email
  cf_api_key:
    file: $DOCKERDIR/secrets/cf_api_key
  cf_token:
    file: $DOCKERDIR/secrets/cf_token
  traefik_forward_auth:
    file: $DOCKERDIR/secrets/traefik_forward_auth
  mullvad_account:
    file: $DOCKERDIR/secrets/mullvad_account

########################### EXTENSION FIELDS
# Helps eliminate repetition of sections
# More Info on how to use this: https://github.com/htpcBeginner/docker-traefik/pull/228

# Common environment values
x-environment: &default-tz-puid-pgid
  TZ: $TZ
  PUID: $PUID
  PGID: $PGID

# Proxy Network and Security
x-network-and-security: &network-and-security
  networks:
    - t2_proxy
  security_opt:
    - no-new-privileges:true

# Keys common to some of the services in basic-services.txt
x-common-keys-core: &common-keys-core
  <<: *network-and-security
  restart: always
  # profiles:
  # - core

# Keys common to some of the services in basic-services.txt
x-common-keys-core: &common-keys-monitoring
  <<: *network-and-security
  restart: always
  # profiles:
  # - monitoring

# Keys common to some of the dependent services/apps
x-common-keys-apps: &common-keys-apps
  <<: *network-and-security
  restart: unless-stopped
  # profiles:
  # - apps

# Keys common to some of the services in media-services.txt
x-common-keys-media: &common-keys-media
  <<: *network-and-security
  restart: always
  # profiles:
  # - media

########################### SERVICES
services:
  ############################# FRONTENDS

  # Traefik 2 - Reverse Proxy
  # Touch (create empty files) traefik.log and acme/acme.json. Set acme.json permissions to 600.
  # touch $DOCKERDIR/traefik2/acme/acme.json
  # chmod 600 $DOCKERDIR/traefik2/acme/acme.json
  # touch $DOCKERDIR/logs/homeserver/traefik.log # customize this
  traefik:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: traefik
    image: traefik:2.7
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.https.forwardedHeaders.trustedIPs=$CLOUDFLARE_IPS,$LOCAL_IPS
      - --entryPoints.traefik.address=:8080
      # - --entryPoints.ping.address=:8081
      - --api=true
      # - --api.insecure=true
      - --api.dashboard=true
      #- --ping=true
      # - --serversTransport.insecureSkipVerify=true
      - --log=true
      - --log.filePath=/logs/traefik.log
      - --log.level=INFO # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/logs/access.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      #- --accessLog.filters.statusCodes=204-299,400-499,500-599
      - --providers.docker=true
      # - --providers.docker.endpoint=unix:///var/run/docker.sock # Use Docker Socket Proxy instead for improved security
      - --providers.docker.endpoint=tcp://socket-proxy:2375
      # Automatically set Host rule for services
      # - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.$MEDIADOMAIN`)
      - --providers.docker.exposedByDefault=false
      # - --entrypoints.https.http.middlewares=chain-oauth@file
      - --entrypoints.https.http.tls.options=tls-opts@file
      # Add dns-cloudflare as default certresolver for all services. Also enables TLS and no need to specify on individual services
      - --entrypoints.https.http.tls.certresolver=dns-cloudflare
      - --entrypoints.https.http.tls.domains[0].main=$MEDIADOMAIN
      - --entrypoints.https.http.tls.domains[0].sans=*.$MEDIADOMAIN
      # - --entrypoints.https.http.tls.domains[1].main=$DOMAINNAME1 # Pulls main cert for second domain
      # - --entrypoints.https.http.tls.domains[1].sans=*.$DOMAINNAME1 # Pulls wildcard cert for second domain
      - --providers.docker.network=t2_proxy
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory
      # - --providers.file.filename=/path/to/file # Load dynamic configuration from a file
      - --providers.file.watch=true # Only works on top level files in the rules folder
      # - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate
      # - --metrics.prometheus=true
      # - --metrics.prometheus.buckets=0.1,0.3,1.2,5.0
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.254 # You can specify a static IP
      socket_proxy:
    #healthcheck:
    #  test: ["CMD", "traefik", "healthcheck", "--ping"]
    #  interval: 5s
    #  retries: 3
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      # - target: 8080 # insecure api wont work
      #   published: 8080
      #   protocol: tcp
      #   mode: host
    volumes:
      - $DOCKERDIR/appdata/traefik2/rules/homeserver:/rules # file provider directory
      # - /var/run/docker.sock:/var/run/docker.sock:ro # Use Docker Socket Proxy instead for improved security
      - $DOCKERDIR/appdata/traefik2/acme/acme.json:/acme.json # cert location - you must touch this file and change permissions to 600
      - $DOCKERDIR/logs/homeserver/traefik:/logs # for fail2ban or crowdsec
    environment:
      - TZ=$TZ
      - CF_API_EMAIL_FILE=/run/secrets/cf_email
      - CF_API_KEY_FILE=/run/secrets/cf_api_key
      - HTPASSWD_FILE=/run/secrets/htpasswd # HTPASSWD_FILE can be whatever as it is not used/called anywhere.
      - MEDIADOMAIN
    secrets:
      - cf_email
      - cf_api_key
      - htpasswd
    labels:
      #- "autoheal=true"
      - "traefik.enable=true"
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$MEDIADOMAIN`)"
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## Healthcheck/ping
      #- "traefik.http.routers.ping.rule=Host(`traefik.$MEDIADOMAIN`) && Path(`/ping`)"
      #- "traefik.http.routers.ping.tls=true"
      #- "traefik.http.routers.ping.service=ping@internal"
      ## Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=chain-oauth@file" # For Google OAuth

  # Docker Socket Proxy - Security Enchanced Proxy for Docker Socket
  socket-proxy:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: socket-proxy
    image: tecnativa/docker-socket-proxy
    networks:
      socket_proxy:
        ipv4_address: 192.168.91.254 # You can specify a static IP
    # privileged: true # true for VM. False for unprivileged LXC container.
    ports:
    - "127.0.0.1:2375:2375" # Port 2375 should only ever get exposed to the internal network. When possible use this line.
    # I use the next line instead, as I want portainer to manage multiple docker endpoints within my home network.
    # - "2375:2375"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      - LOG_LEVEL=info # debug,info,notice,warning,err,crit,alert,emerg
      ## Variables match the URL prefix (i.e. AUTH blocks access to /auth/* parts of the API, etc.).
      # 0 to revoke access.
      # 1 to grant access.
      ## Granted by Default
      - EVENTS=1
      - PING=1
      - VERSION=1
      ## Revoked by Default
      # Security critical
      - AUTH=0
      - SECRETS=0
      - POST=1 # Watchtower
      # Not always needed
      - BUILD=0
      - COMMIT=0
      - CONFIGS=0
      - CONTAINERS=1 # Traefik, portainer, etc.
      - DISTRIBUTION=0
      - EXEC=0
      - IMAGES=1 # Portainer
      - INFO=1 # Portainer
      - NETWORKS=1 # Portainer
      - NODES=0
      - PLUGINS=0
      - SERVICES=1 # Portainer
      - SESSION=0
      - SWARM=0
      - SYSTEM=0
      - TASKS=1 # Portainer
      - VOLUMES=1 # Portainer

  # Google OAuth - Single Sign On using OAuth 2.0
  # https://www.smarthomebeginner.com/google-oauth-with-traefik-docker/
  oauth:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: oauth
    image: thomseddon/traefik-forward-auth:latest
    # image: thomseddon/traefik-forward-auth:2.1-arm # Use this image with Raspberry Pi
    # Allow apps to bypass OAuth. Radarr example below will bypass OAuth if API key is present in the request (eg. from NZB360 mobile app).
    # While this is one way, the recommended way is to bypass authentication using Traefik labels shown in some of the -Arr apps in this file.
    # command: --rule.radarr.action=allow --rule.radarr.rule="Headers(`X-Api-Key`, `$RADARR_API_KEY`)"
    # command: --rule.sabnzbd.action=allow --rule.sabnzbd.rule="HeadersRegexp(`X-Forwarded-Uri`, `$SABNZBD_API_KEY`)"
    environment:
      - CONFIG=/config
      - COOKIE_DOMAIN=$MEDIADOMAIN
      - INSECURE_COOKIE=false
      - AUTH_HOST=oauth.$MEDIADOMAIN
      - URL_PATH=/_oauth
      - LOG_LEVEL=warn # set to trace while testing bypass rules
      - LOG_FORMAT=text
      - LIFETIME=864000 # 10 days
      - DEFAULT_ACTION=auth
      - DEFAULT_PROVIDER=google
    secrets:
      - source: traefik_forward_auth
        target: /config
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      #- "traefik.http.routers.oauth-rtr.tls=true" #enabling this makes oauth have different tls options than the rest of the services and causes 421 misredirected request error
      - "traefik.http.routers.oauth-rtr.entrypoints=https"
      - "traefik.http.routers.oauth-rtr.rule=Host(`oauth.$MEDIADOMAIN`)"
      ## Middlewares
      - "traefik.http.routers.oauth-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.oauth-rtr.service=oauth-svc"
      - "traefik.http.services.oauth-svc.loadbalancer.server.port=4181"

  # Heimdall - Application Dashboard
  heimdall:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    image: lscr.io/linuxserver/heimdall
    container_name: heimdall
    # ports:
    #  - "$HEIMDALL_PORT:80" # 80 to 82 already taken by other services
      # - "444:443" # 443 used by Traefik/Nginx Proxy Manager. Disabled because we will put Heimdall behind proxy.
    volumes:
      - $DOCKERDIR/appdata/heimdall:/config
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.heimdall-rtr.entrypoints=https"
      - "traefik.http.routers.heimdall-rtr.rule=Host(`heim.$MEDIADOMAIN`)"
      ## Middlewares
      - "traefik.http.routers.heimdall-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.heimdall-rtr.service=heimdall-svc"
      - "traefik.http.services.heimdall-svc.loadbalancer.server.port=80"

  # CrowdSec - Open-source & collaborative security IPS
  crowdsec:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    image: crowdsecurity/crowdsec
    container_name: crowdsec
    environment:
      COLLECTIONS: "crowdsecurity/traefik crowdsecurity/http-cve crowdsecurity/whitelist-good-actors"
      GID: "${GID-1000}"
      CUSTOM_HOSTNAME: cDoc
    volumes:
      - $DOCKERDIR/logs/homeserver:/logs:ro
      - $DOCKERDIR/appdata/crowdsec/data:/var/lib/crowdsec/data
      - $DOCKERDIR/appdata/crowdsec/config:/etc/crowdsec

  # CrowdSec Bouncer - Traefik
  crowdsec-bouncer:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    image: fbonalair/traefik-crowdsec-bouncer
    container_name: crowdsec-bouncer
    environment:
      GIN_MODE: release # default is debug (more logs)
      CROWDSEC_BOUNCER_API_KEY: $CROWDSEC_BOUNCER_TRAEFIK_API_KEY
      CROWDSEC_AGENT_HOST: crowdsec:8080 # CrowdSec host and port

  ############################# DOWNLOADERS

  # Gluetun - vpn client
  gluetun:
    image: qmcgaw/gluetun
    container_name: gluetun
    restart: unless-stopped
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.161
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun:/dev/net/tun
    ports:
      - "8090:8090" #qBittorrent
      - "$VPNPORT:$VPNPORT" #mullvad generated, used for torrents
      #- 8888:8888/tcp # HTTP proxy
      #- 8388:8388/tcp # Shadowsocks
      #- 8388:8388/udp # Shadowsocks
    volumes:
      - $DOCKERDIR/appdata/gluetun/data:/gluetun
    environment:
      <<: *default-tz-puid-pgid
      TZ: $TZ
      PUID: $PUID
      PGID: $PGID
      VPN_SERVICE_PROVIDER: mullvad
      VPN_TYPE: openvpn
      OPENVPN_USER_SECRETFILE: /run/secrets/mullvad_account
      SERVER_CITIES: $VPNCITY #using cities because port is based on city
      FIREWALL_VPN_INPUT_PORTS: $VPNPORT #mullvad generated port
    secrets:
      - mullvad_account
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.qbittorrent-rtr.entrypoints=https"
      - "traefik.http.routers.qbittorrent-rtr.rule=Host(`qbit.$MEDIADOMAIN`)"
      ## Middlewares
      - "traefik.http.routers.qbittorrent-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.qbittorrent-rtr.service=qbittorrent-svc"
      - "traefik.http.services.qbittorrent-svc.loadbalancer.server.port=8090"

  # qBittorrent - Torrent downloader
  # Needs trailing / if using PathPrefixStrip
  qbittorrent:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    network_mode: "service:gluetun"
    volumes:
      - $DOCKERDIR/appdata/qbittorrent:/config
      - $DATADIR/data/torrents:/data/torrents
    environment:
      <<: *default-tz-puid-pgid
      WEBUI_PORT: 8090
      UMASK_SET: 002

  # sabnzbd - Binary newsgrabber (NZB downloader)
  sabnzbd:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: lscr.io/linuxserver/sabnzbd:latest
    container_name: sabnzbd
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.170
    ports:
      - "8091:8080"
    volumes:
      - $DOCKERDIR/appdata/sabnzbd:/config
      - $DATADIR/data/usenet:/data/usenet
      - $DOCKERDIR/appdata/incomplete:/data/usenet/incomplete
    environment:
      <<: *default-tz-puid-pgid
      host_whitelist: sabnzbd.$MEDIADOMAIN
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth
      - "traefik.http.routers.sabnzbd-rtr.entrypoints=https"
      - "traefik.http.routers.sabnzbd-rtr.rule=Host(`sabnzbd.$MEDIADOMAIN`)"
      ## Middlewares
      - "traefik.http.routers.sabnzbd-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.sabnzbd-rtr.service=sabnzbd-svc"
      - "traefik.http.services.sabnzbd-svc.loadbalancer.server.port=8080"

  ############################# INDEXERS

  # Prowlarr - Torrent proxy
  prowlarr:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: ghcr.io/linuxserver/prowlarr:develop
    container_name: prowlarr
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.162
    # ports:
    #  - "$PROWLARR_PORT:9696"
    volumes:
      - $DOCKERDIR/appdata/prowlarr:/config
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.prowlarr-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.prowlarr-rtr-bypass.rule=Host(`prowlarr.$MEDIADOMAIN`) && (Headers(`X-Api-Key`, `$PROWLARR_API_KEY`) || Query(`apikey`, `$PROWLARR_API_KEY`))"
      - "traefik.http.routers.prowlarr-rtr-bypass.priority=100"
      ## HTTP Routers
      - "traefik.http.routers.prowlarr-rtr.entrypoints=https"
      - "traefik.http.routers.prowlarr-rtr.rule=Host(`prowlarr.$MEDIADOMAIN`)"
      - "traefik.http.routers.prowlarr-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.prowlarr-rtr.middlewares=chain-oauth@file"
      - "traefik.http.routers.prowlarr-rtr-bypass.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.prowlarr-rtr-bypass.service=prowlarr-svc"
      - "traefik.http.routers.prowlarr-rtr.service=prowlarr-svc"
      - "traefik.http.services.prowlarr-svc.loadbalancer.server.port=9696"

  # FlareSolverr - Proxy server to bypass Cloudflare protection TODO: passes test but says disabled in prowlarr
  # Not sure if I need this or not. Just testing.
  flaresolverr:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.160
    environment:
      LOG_LEVEL: info
      LOG_HTML: false
      CAPTCHA_SOLVER: none
      TZ: $TZ
    #ports:
    #  - "8191:8191"
    restart: unless-stopped

  ############################# PVRS

  # Radarr - Movie management TODO; migrate to stable
  # Set url_base in radarr settings if using PathPrefix
  radarr:
    <<: *common-keys-media # See EXTENSION FIELDS at the top
    image: lscr.io/linuxserver/radarr:amd64-nightly-4.2.0.6394-ls326 # latest was causing "Error parsing column 45", because nightly is newer than stable, should migrate slowly
    container_name: radarr
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.164
    ports:
      - "$RADARR_PORT:7878"
    volumes:
      - $DOCKERDIR/appdata/radarr:/config
      # Optional. See why MediaCover is mounted as volume https://github.com/htpcBeginner/docker-traefik/discussions/147
      #- $DOCKERDIR/appdata/temp/radarr/MediaCover:/config/MediaCover
      - "/etc/localtime:/etc/localtime:ro"
      - $DATADIR/data:/data
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.radarr-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.radarr-rtr-bypass.rule=Host(`radarr.$MEDIADOMAIN`) && (Headers(`X-Api-Key`, `$RADARR_API_KEY`) || Query(`apikey`, `$RADARR_API_KEY`))"
      - "traefik.http.routers.radarr-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.radarr-rtr.entrypoints=https"
      - "traefik.http.routers.radarr-rtr.rule=Host(`radarr.$MEDIADOMAIN`)"
      - "traefik.http.routers.radarr-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.radarr-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.radarr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.radarr-rtr.service=radarr-svc"
      - "traefik.http.routers.radarr-rtr-bypass.service=radarr-svc"
      - "traefik.http.services.radarr-svc.loadbalancer.server.port=7878"

  # Sonarr - TV Shows management
  # Set url_base in sonarr settings if using PathPrefix
  sonarr:
    <<: *common-keys-media # See EXTENSION FIELDS at the top
    image: lscr.io/linuxserver/sonarr
    container_name: sonarr
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.167
    ports:
      - "$SONARR_PORT:8989"
    volumes:
      - $DOCKERDIR/appdata/sonarr:/config
      - "/etc/localtime:/etc/localtime:ro"
      # Optional. See why MediaCover is mounted as volume https://github.com/htpcBeginner/docker-traefik/discussions/147
      #- $DOCKERDIR/appdata/temp/sonarr/MediaCover:/config/MediaCover
      - $DATADIR/data:/data
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.sonarr-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.sonarr-rtr-bypass.rule=Host(`sonarr.$MEDIADOMAIN`) && (Headers(`X-Api-Key`, `$SONARR_API_KEY`) || Query(`apikey`, `$SONARR_API_KEY`))"
      - "traefik.http.routers.sonarr-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.sonarr-rtr.entrypoints=https"
      - "traefik.http.routers.sonarr-rtr.rule=Host(`sonarr.$MEDIADOMAIN`)"
      - "traefik.http.routers.sonarr-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.sonarr-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.sonarr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.sonarr-rtr.service=sonarr-svc"
      - "traefik.http.routers.sonarr-rtr-bypass.service=sonarr-svc"
      - "traefik.http.services.sonarr-svc.loadbalancer.server.port=8989"

  ############################# MEDIA

  # Jellyfin - Media Server TODO: DLNA
  jellyfin:
    <<: *common-keys-media # See EXTENSION FIELDS at the top
    image: jellyfin/jellyfin:latest
    container_name: jellyfin
    #user: "$PUID:$PGID" #jellyfin docker image does not support puid guid environment variables, currently running as root
    devices:
      - /dev/dri/card0:/dev/dri/card0 # for hardware transcoding
      - /dev/dri/renderD128:/dev/dri/renderD128
    ports:
      - "$JELLYFIN_PORT:8096"
      - "8920:8920" # Emby also uses same port if running both
    environment:
      <<: *default-tz-puid-pgid
      UMASK_SET: 022
    volumes:
      - $DOCKERDIR/appdata/jellyfin:/config
      - $DOCKERDIR/appdata/temp/jellyfin/metadata:/config/metadata
      - /dev/shm:/data/transcode # Offload transcoding to RAM if you have enough RAM
      - $DATADIR/data/media:/data/media
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.jellyfin-rtr.entrypoints=https"
      - "traefik.http.routers.jellyfin-rtr.rule=Host(`$MEDIADOMAIN`)"
      ## Middlewares
      - "traefik.http.routers.jellyfin-rtr.middlewares=chain-no-auth@file"
      ## HTTP Services
      - "traefik.http.routers.jellyfin-rtr.service=jellyfin-svc"
      - "traefik.http.services.jellyfin-svc.loadbalancer.server.port=8096"

  ############################# MEDIA FILE MANAGEMENT

  # Bazarr - Subtitle Management
  bazarr:
    <<: *common-keys-media # See EXTENSION FIELDS at the top
    image: lscr.io/linuxserver/bazarr
    container_name: bazarr
    ports:
      - "6767:6767"
    volumes:
      - $DOCKERDIR/appdata/bazarr:/config
      - $DATADIR/data/media:/data/media
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.bazarr-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.bazarr-rtr-bypass.rule=Host(`bazarr.$MEDIADOMAIN`) && (Headers(`X-Api-Key`, `$BAZARR_API_KEY`) || Query(`apikey`, `$BAZARR_API_KEY`))"
      - "traefik.http.routers.bazarr-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.bazarr-rtr.entrypoints=https"
      - "traefik.http.routers.bazarr-rtr.rule=Host(`bazarr.$MEDIADOMAIN`)"
      - "traefik.http.routers.bazarr-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.bazarr-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.bazarr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.bazarr-rtr.service=bazarr-svc"
      - "traefik.http.routers.bazarr-rtr-bypass.service=bazarr-svc"
      - "traefik.http.services.bazarr-svc.loadbalancer.server.port=6767"

  # tdarr TODO: bypass oauth when using api key
  tdarr:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: haveagitgat/tdarr:latest
    container_name: tdarr
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.163
    ports:
      - "8265:8265" #web ui
      - "8266:8266" #server
    volumes:
      - $DOCKERDIR/appdata/tdarr/server:/app/server
      - $DOCKERDIR/appdata/tdarr/configs:/app/configs
      - $DOCKERDIR/appdata/tdarr/logs:/app/logs
      - $DOCKERDIR/appdata/temp/tdarr:/temp
      - $DATADIR/data/media:/data/media
    devices:
      - /dev/dri/card0:/dev/dri/card0 # for hardware transcoding
      - /dev/dri/renderD128:/dev/dri/renderD128
    environment:
      <<: *default-tz-puid-pgid
      UMASK_SET: 002
      serverIP: 0.0.0.0
      serverPort: 8266
      webUIPort: 8265
      internalNode: true
      nodeID: MyInternalNode
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      #- "traefik.http.routers.tdarr-rtr-bypass.entrypoints=https"
      #- "traefik.http.routers.tdarr-rtr-bypass.rule=Host(`tdarr.$MEDIADOMAIN`) && (Headers(`X-Api-Key`, `$TDARR_API_KEY`) || Query(`apikey`, `$TDARR_API_KEY`))"
      #- "traefik.http.routers.tdarr-rtr-bypass.priority=100"
      ## HTTP Routers
      - "traefik.http.routers.tdarr-rtr.entrypoints=https"
      - "traefik.http.routers.tdarr-rtr.rule=Host(`tdarr.$MEDIADOMAIN`)"
      #- "traefik.http.routers.tdarr-rtr.priority=99"
      ## Middlewares
      #- "traefik.http.routers.tdarr-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.tdarr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.tdarr-rtr.service=tdarr-svc"
      #- "traefik.http.routers.tdarr-rtr-bypass.service=tdarr-svc"
      - "traefik.http.services.tdarr-svc.loadbalancer.server.port=8265"

  ############################# UTILITIES

  # Uptime Kuma - Status Page & Monitoring Server
  uptime-kuma:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    image: louislam/uptime-kuma
    container_name: uptime-kuma
    networks:
      - t2_proxy
      - default
    ports:
      - "3001:3001"
    volumes:
      - $DOCKERDIR/appdata/uptime-kuma:/app/data
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.uptime-kuma-rtr.entrypoints=https"
      - "traefik.http.routers.uptime-kuma-rtr.rule=Host(`kuma.$MEDIADOMAIN`)"
      ## Middlewares
      - "traefik.http.routers.uptime-kuma-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.uptime-kuma-rtr.service=uptime-kuma-svc"
      - "traefik.http.services.uptime-kuma-svc.loadbalancer.server.port=3001"

  cloudflared: #TODO: secrets or credentials file https://github.com/cloudflare/cloudflared/issues/645
  #TODO: display real-ip/forwarded-for in traefik logs, to utilize fail2ban/crowdsec
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: cloudflare/cloudflared:2022.7.1
    container_name: cloudflared
    networks:
      t2_proxy:
        ipv4_address: 192.168.90.199
    command: tunnel --no-autoupdate run --token $CFTUNNELTOKEN #--loglevel debug

  ############################# MAINTENANCE

  # Docker-GC - Automatic Docker Garbage Collection
  # Create docker-gc-exclude file
  dockergc:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: clockworksoul/docker-gc-cron:latest
    container_name: docker-gc
    networks:
      - socket_proxy
    volumes:
      # - /var/run/docker.sock:/var/run/docker.sock # Use Docker Socket Proxy instead for improved security
      - $DOCKERDIR/appdata/docker-gc/docker-gc-exclude:/etc/docker-gc-exclude
    environment:
      CRON: 0 0 0 * * ? # Everyday at midnight. Previously 0 0 * * *
      FORCE_IMAGE_REMOVAL: 1
      FORCE_CONTAINER_REMOVAL: 0
      GRACE_PERIOD_SECONDS: 604800
      DRY_RUN: 0
      CLEAN_UP_VOLUMES: 1
      TZ: $TZ
      DOCKER_HOST: tcp://socket-proxy:2375

#  # Cloudflare DDNS - Dynamic DNS Updater
#  cf-ddns:
#    <<: *common-keys-apps
#    container_name: cf-ddns
#    image: oznu/cloudflare-ddns:latest
#    environment:
#      - API_KEY_FILE=/run/secrets/cf_token
#      - ZONE=$MEDIADOMAIN
#      - PROXIED=true
#    secrets:
#      - cf_token
